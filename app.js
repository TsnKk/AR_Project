// ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Three.js ‡πÅ‡∏•‡∏∞ GLTFLoader
import * as THREE from './three.module.js';
import { GLTFLoader } from './GLTFLoader.js';

// ‚úÖ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö HTML
const video = document.getElementById('video');
const infoBox = document.getElementById('info-box');  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•

// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
  .then(stream => video.srcObject = stream);

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
const loaderOverlay = document.createElement('div');
loaderOverlay.style.position = 'fixed';
loaderOverlay.style.top = 0;
loaderOverlay.style.left = 0;
loaderOverlay.style.width = '100vw';
loaderOverlay.style.height = '100vh';
loaderOverlay.style.background = 'rgba(0,0,0,0.5)';
loaderOverlay.style.display = 'flex';
loaderOverlay.style.flexDirection = 'column';
loaderOverlay.style.justifyContent = 'center';
loaderOverlay.style.alignItems = 'center';
loaderOverlay.style.zIndex = 9999;
loaderOverlay.style.color = '#fff';
loaderOverlay.style.fontSize = '2em';
loaderOverlay.innerHTML = `
  <div class="spinner" style="border: 8px solid #f3f3f3; border-top: 8px solid #3498db; border-radius: 50%; width: 60px; height: 60px; animation: spin 1s linear infinite;"></div>
  <div id="loading-time" style="margin-top: 20px;">0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</div>
`;
document.body.appendChild(loaderOverlay);
loaderOverlay.style.display = 'none';

// ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö spinner
const style = document.createElement('style');
style.innerHTML = `
@keyframes spin {
  0% { transform: rotate(0deg);}
  100% { transform: rotate(360deg);}
}`;
document.head.appendChild(style);

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ QR Code Scanner ‡∏î‡πâ‡∏ß‡∏¢ ZXing
const codeReader = new ZXing.BrowserMultiFormatReader();
codeReader.decodeFromVideoDevice(null, 'video', async (result, err) => {
  if (result) {
    const url = result.getText();
    console.log('QR Detected:', url);

    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if (video.srcObject) {
      video.srcObject.getTracks().forEach(track => track.stop());
      video.srcObject = null;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    loaderOverlay.style.display = 'flex';
    let seconds = 0;
    const timeDiv = document.getElementById('loading-time');
    timeDiv.textContent = '0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ';
    const timer = setInterval(() => {
      seconds++;
      timeDiv.textContent = `${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    }, 1000);

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å QR
    await loadFromQR(url);

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ß‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    clearInterval(timer);
    loaderOverlay.style.display = 'none';

    //codeReader.reset(); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏û‡∏ö QR
  }
});

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Scene, Camera ‡πÅ‡∏•‡∏∞ Renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.01, 100);
camera.position.z = 5;

const renderer = new THREE.WebGLRenderer({
  canvas: document.getElementById('canvas'),
  alpha: true
});
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);
document.body.appendChild(renderer.domElement);

// ‚úÖ ‡πÅ‡∏™‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
const light = new THREE.HemisphereLight(0xffffff, 0x444444); // ‡πÅ‡∏™‡∏á‡∏ô‡∏∏‡πà‡∏°‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏ô‡∏•‡πà‡∏≤‡∏á
scene.add(light);

let model = null; // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• 3D (.glb)
function loadModel(url) {
  const loader = new GLTFLoader();
loader.load(url, gltf => {
  if (model) {
    scene.remove(model);
    model.traverse(child => {
      if (child.isMesh) {
        child.geometry.dispose();
        child.material.dispose();
      }
    });
    model = null;
  }
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Scene
  model = gltf.scene;
  model.scale.set(1.0, 1.0, 1.0); // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á
  model = gltf.scene; // <<== ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  scene.add(model);
}, undefined, error => console.error('Error loading model:', error));
    }
    

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å QR (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á URL ‡πÅ‡∏•‡∏∞ JSON)
function loadFromQR(qrUrl) {
  const url = new URL(qrUrl);
  const jsonUrl = url.searchParams.get("src") || qrUrl; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ?src=... ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡πÜ

  fetch(jsonUrl)
    .then(res => res.json())
    .then(data => {
      // üìÑ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      if (infoBox) {
        infoBox.innerHTML = `
          <h3>${data.name}</h3>
          <p>${data.description}</p>
          <p><strong>‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> ${data.price}</p>
          <p><strong>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤:</strong> ${data.origin}</p>
        `;
      }

      // ‚¨á ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô JSON
      loadModel(data.model);
    })
    .catch(err => {
      console.error('‡πÇ‡∏´‡∏•‡∏î JSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      if (infoBox) infoBox.innerHTML = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å QR Code ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ';
    });
}

// --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô ---
let isDragging = false;
let previousX = 0;
let rotationY = 0;
let rotationZ = 0;

// --- Mouse Events ---
renderer.domElement.addEventListener('mousedown', (e) => {
  isDragging = true;
  previousX = e.clientX;
});
renderer.domElement.addEventListener('mousemove', (e) => {
  if (!isDragging) return;
  const deltaX = e.clientX - previousX;
  previousX = e.clientX;
  rotationY += deltaX * 0.01; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πÑ‡∏î‡πâ
});
renderer.domElement.addEventListener('mouseup', () => {
  isDragging = false;
});
renderer.domElement.addEventListener('mouseleave', () => {
  isDragging = false;
});

// --- Touch Events ---
renderer.domElement.addEventListener('touchstart', (e) => {
  if (e.touches.length === 1) {
    isDragging = true;
    previousX = e.touches[0].clientX;
  }
});
renderer.domElement.addEventListener('touchmove', (e) => {
  if (!isDragging || e.touches.length !== 1) return;
  const deltaX = e.touches[0].clientX - previousX;
  previousX = e.touches[0].clientX;
  rotationY += deltaX * 0.01;
});
renderer.domElement.addEventListener('touchend', () => {
  isDragging = false;
});

// ‚úÖ ‡∏ß‡∏ô‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°
function animate() {
  requestAnimationFrame(animate);

  if (model) {
    model.rotation.y = rotationY; // ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
    model.rotation.y += 0.01;
  }

  renderer.render(scene, camera);
}
animate();
// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° raycaster ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™
const raycaster = new THREE.Raycaster();
const touch = new THREE.Vector2();

// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (Responsive)
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});


